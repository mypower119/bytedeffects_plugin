//
//  BEAlgorithmUI.h
//  BytedEffects
//
//  Created by qun on 2020/8/21.
//  Copyright © 2020 ailab. All rights reserved.
//

#import <UIKit/UIKit.h>
#import "BEAlgorithmItem.h"
#import "BEAlgorithmTask.h"

@protocol BEAlgorithmUIGenerator <NSObject>

- (UIView *)createView;
- (NSString *)title;
- (BEAlgorithmKey *)key;

@end

typedef void(^BEAlgorithmUIRunnable)(void);

//   {zh} / 为 BEAlgorithmUI 提供额外的功能     {en} Additional features for BEAlgorithmUI 
@protocol BEAlgorithmInfoProvider <NSObject>

//   {zh} / @brief 展示/关闭算法展示信息     {en} /@Brief display/Close algorithm display information 
//   {zh} / @param vc 算法展示信息 VC     {en} /@Param vc algorithm display information VC 
//   {zh} / @param show 展示/关闭     {en} /@param show/close 
- (void)showOrHideVC:(UIViewController *)vc show:(BOOL)show;

//   {zh} / @brief 获取算法 Task     {en} /@Brief Get Algorithm Task 
//   {zh} / @details 有些 BEAlgorithmUI 如 FaceVerifyUI 是自定义实现菜单栏的，     {en} /@Details Some BEAlgorithmUIs such as FaceVerifyUI customize the implementation of the menu bar, 
//   {zh} / 所以需要拿到 BEAlgorithmTask 直接调用算法方法     {en} /So you need to get BEAlgorithmTask to call the algorithm method directly 
- (BEAlgorithmTask *)algorithmTask;

//   {zh} / @brief 图像尺寸     {en} /@brief image size 
- (CGSize)imageSize;

//   {zh} / @brief 图像旋转角度     {en} /@Brief image rotation angle 
- (int)imageRotation;

- (UIView *)view;

//   {zh} / @brief 添加 block 到 SDK 线程执行     {en} /@brief Add block to SDK thread execution 
//   {zh} / @details 有些 BEAlgorithmUI 如 FaceVerifyUI 是自定义实现菜单栏的，     {en} /@Details Some BEAlgorithmUIs such as FaceVerifyUI customize the implementation of the menu bar, 
//   {zh} / 所以需要直接调用算法方法，为了保证单线程调用，所以需要使用此方法，将     {en} /So you need to call the algorithm method directly. In order to ensure single-threaded calls, you need to use this method, which will 
//   {zh} / 调用操作添加到 SDK 线程执行     {en} /Call operation added to SDK thread execution 
/// @param runnable runnable block
- (void)addAlgorithmUIRunnable:(BEAlgorithmUIRunnable)runnable;

@end

//   {zh} / 定义了一个算法要展示的 UI，有两大功能：     {en} /Defines the UI to display an algorithm, which has two major functions: 
//   {zh} / 1. 声明了算法在菜单栏展示的内容，有两种方式：     {en} /1. Declares the content displayed by the algorithm in the menu bar in two ways: 
//   {zh} /     1. 若实现了 algorithmItem 方法，返回一个 BEAlgorithmItem，那么 BEAlgorithmVC     {en} /1. If the algorithmItem method is implemented and a BEAlgorithmItem is returned, then BEAlgorithmVC 
//   {zh} /        便会据此生成一个按钮列表，并将点击事件通过 onEvent:flag: 传递进来，以便修改 UI     {en} /This will generate a list of buttons and pass the click event onEvent: flag: to modify the UI 
//   {zh} /     2. 若 BEAlgorithmVC 根据 BEAlgorithmItem 生成的按钮列表无法满足，则可以实现     {en} /2. If the list of buttons generated by BEAlgorithmVC based on BEAlgorithmItem cannot be satisfied, it can be implemented 
//   {zh} /        algorithmGenerator 直接提供一个菜单栏 View，UI 逻辑由内部控制     {en} /AlgorithmGenerator provides a menu bar View directly, and the UI logic is controlled internally 
//   {zh} / 2. 声明了算法结果展示相关的 UI，BEAlgorithmVC 完成算法检测后，会将检测结果通过     {en} /2. Declares the UI related to the display of the algorithm results. BEAlgorithmVC will pass the detection results after completing the algorithm detection 
//   {zh} /    onReceiveResult: 传递给 BEAlgorithmUI，BEAlgorithmUI 里面可根据算法完成展示 UI     {en} /OnReceiveResult: pass to BEAlgorithmUI, BEAlgorithmUI can display UI according to the algorithm 
//   {zh} /    的装配，然后通过 BEAlgorithmInfoProvider#showOrHideVC:show: 将展示信息提交到     {en} /Assembly, and then submit the display information to the BEAlgorithmInfoProvider #showOrHideVC: show: 
//   {zh} /    BEAlgorithmVC 中     {en} /BEAlgorithmVC 
///
@protocol BEAlgorithmUI <NSObject>

//   {zh} / @brief 初始化     {en} /@brief initialization 
/// @param provider BEAlgorithmInfoProvider
- (void)initUI:(id<BEAlgorithmInfoProvider>)provider;

//   {zh} / @brief 接收按钮点击信息     {en} /@Briefly receive button click on message 
//   {zh} / @param key 算法 key     {en} /@param key algorithm key 
//   {zh} / @param flag 按钮开关     {en} /@param flag button switch 
- (void)onEvent:(BEAlgorithmKey *)key flag:(BOOL)flag;

//   {zh} / @brief 接收算法结果     {en} /@Briefly receive algorithm results 
//   {zh} / @param result 算法结果     {en} /@param result algorithm result 
- (void)onReceiveResult:(id)result;

//   {zh} / @brief 生成 UI 所需     {en} /@brief build UI required 
- (BEAlgorithmItem *)algorithmItem;

//   {zh} / @brief 生成 UI 所需，子类必须实现 algorithmGenerator 与 algorithmItem 其中一个     {en} /@brief To generate the UI, the subclass must implement either the algorithmGenerator or the algorithmItem 
- (id<BEAlgorithmUIGenerator>)algorithmGenerator;

#pragma mark protected

- (void)initView;
- (void)initCallback;

@end

@interface BEBaseAlgorithmUI : NSObject <BEAlgorithmUI>

@property (nonatomic, weak) id<BEAlgorithmInfoProvider> provider;

@end


#define CHECK_ARGS_AVAILABLE(NUM, ARGS...)\
{\
NSArray *_check_args_arr = [NSArray arrayWithObjects:ARGS, nil];\
if (_check_args_arr.count != NUM) {\
    NSLog(@"check args available need %d params, but only found %lu in %@", NUM, (unsigned long)_check_args_arr.count, _check_args_arr);\
    return;\
}\
}
